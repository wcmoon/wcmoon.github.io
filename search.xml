<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>TS练习-链表</title>
      <link href="2021/04/23/ts-lian-xi-lian-biao/"/>
      <url>2021/04/23/ts-lian-xi-lian-biao/</url>
      
        <content type="html"><![CDATA[<h2 id="CODE-IS-EVERYTHING"><a href="#CODE-IS-EVERYTHING" class="headerlink" title="CODE IS EVERYTHING"></a>CODE IS EVERYTHING</h2><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">LinkedNode<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token punctuation">&#123;</span>  element<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>  next<span class="token operator">:</span> LinkedNode<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>e<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> next<span class="token operator">?</span><span class="token operator">:</span> LinkedNode<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>element <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">LinkedList<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token punctuation">&#123;</span>  head<span class="token operator">:</span> LinkedNode<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>head<span class="token operator">?</span><span class="token operator">:</span> LinkedNode<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">,</span> len<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> head <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> len <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">find</span><span class="token punctuation">(</span>pos<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span>LinkedNode<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> pos <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">null</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> cur <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> pos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      i<span class="token operator">++</span><span class="token punctuation">;</span>      cur <span class="token operator">=</span> cur<span class="token operator">?.</span>next <span class="token keyword">as</span> LinkedNode<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> cur<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">insert</span><span class="token punctuation">(</span>node<span class="token operator">:</span> LinkedNode<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">,</span> pos<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">boolean</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      node<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> node<span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> beforeIns<span class="token operator">:</span>LinkedNode<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>beforeIns<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      node<span class="token punctuation">.</span>next <span class="token operator">=</span> beforeIns<span class="token operator">?.</span>next <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      beforeIns<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">del</span><span class="token punctuation">(</span>pos<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span>LinkedNode<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> delElement<span class="token operator">:</span>LinkedNode<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      delElement <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token operator">?.</span>next <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">--</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> delElement<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> beforeDel <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>beforeDel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      delElement <span class="token operator">=</span> beforeDel<span class="token punctuation">.</span>next<span class="token punctuation">;</span>      beforeDel<span class="token punctuation">.</span>next <span class="token operator">=</span> beforeDel<span class="token operator">?.</span>next<span class="token operator">?.</span>next <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> delElement<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> cur <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">;</span>    <span class="token keyword">let</span> output <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      output <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>output<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>cur<span class="token punctuation">.</span>element<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> -- </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>      cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> nodeListHead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedNode</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> cur <span class="token operator">=</span> nodeListHead<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> list<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  cur<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedNode<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span></span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 构建链表</span><span class="token keyword">let</span> nodeList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span>nodeListHead<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nodeList<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 删除测试</span>nodeList<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nodeList<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 插入测试</span>nodeList<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LinkedNode</span><span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nodeList<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> TS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TS </tag>
            
            <tag> 练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP状态码（一）</title>
      <link href="2021/02/13/http-zhuang-tai-ma-yi/"/>
      <url>2021/02/13/http-zhuang-tai-ma-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="301-和-302-有什么区别？"><a href="#301-和-302-有什么区别？" class="headerlink" title="301 和 302 有什么区别？"></a>301 和 302 有什么区别？</h2><p>面试的时候经常会有这样的问题：”状态码 301 和 302 有什么区别？”<br>网上可以找到最简洁的答案是，301 是暂时的重定向，302 是永久的重定向。<br>但是翻阅了 MDN 之后发现，事情绝对没有这么简单。事情还得从另外的几个状态码说起。</p><h2 id="301-和-308"><a href="#301-和-308" class="headerlink" title="301 和 308"></a>301 和 308</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/308">MDN</a></p><p>首先 301 和 308 都是永久重定向。所谓永久重定向，意味着请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个URI之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。</p><p>但是两者还是有区别的，尽管标准要求浏览器在收到该响应并进行重定向时不应该修改 http method 和 body，但是有一些浏览器可能会有问题。所以最好是在应对GET 或 HEAD 方法时使用301，其他情况使用308 来替代301。</p><h2 id="302-和-307"><a href="#302-和-307" class="headerlink" title="302 和 307"></a>302 和 307</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/302">MDN</a></p><p>302、307 这一对和 301、308 一对的关系很像。首先，两者都是暂时重定向，表明请求的资源被暂时的移动到了由Location 头部指定的 URL 上。浏览器会重定向到这个URL， 但是搜索引擎不会对该资源的链接进行更新。</p><p>因为历史原因，不是所有的用户代理都会保证重定向不修改 http method 和 body，所以推荐仅在响应 GET 或 HEAD 方法时采用 302 状态码，而在其他时候使用 307 Temporary Redirect 来替代，因为在这些场景下方法变换是明确禁止的。</p><h2 id="怎么选择状态码"><a href="#怎么选择状态码" class="headerlink" title="怎么选择状态码"></a>怎么选择状态码</h2><p>一张图说明如下</p><p><img src="https://blog-cdn.wcmoon.com/3xx-code.png" alt="choose code"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim 配置记录</title>
      <link href="2021/02/07/vim-pei-zhi-ji-lu/"/>
      <url>2021/02/07/vim-pei-zhi-ji-lu/</url>
      
        <content type="html"><![CDATA[<p>vim 配置记录</p><pre class="line-numbers language-none"><code class="language-none">set nuset culset aisyntax onset mouse&#x3D;aset selection&#x3D;exclusiveset nocompatible              &quot; be iMproved, requiredfiletype off                  &quot; required&quot; set the runtime path to include Vundle and initializeset rtp+&#x3D;~&#x2F;.vim&#x2F;bundle&#x2F;vundle.vimcall vundle#begin()&quot; alternatively, pass a path where Vundle should install plugins&quot;call vundle#begin(&#39;~&#x2F;some&#x2F;path&#x2F;here&#39;)&quot; let Vundle manage Vundle, requiredPlugin &#39;VundleVim&#x2F;Vundle.vim&#39;&quot; The following are examples of different formats supported.&quot; Keep Plugin commands between vundle#begin&#x2F;end.&quot; plugin on GitHub repoPlugin &#39;tpope&#x2F;vim-fugitive&#39;&quot; plugin from http:&#x2F;&#x2F;vim-scripts.org&#x2F;vim&#x2F;scripts.html&quot; Plugin &#39;L9&#39;&quot; Git plugin not hosted on GitHub&quot; git repos on your local machine (i.e. when working on your own plugin)&quot; The sparkup vim script is in a subdirectory of this repo called vim.&quot; Pass the path to set the runtimepath properly.Plugin &#39;rstacruz&#x2F;sparkup&#39;, &#123;&#39;rtp&#39;: &#39;vim&#x2F;&#39;&#125;&quot; Install L9 and avoid a Naming conflict if you&#39;ve already installed a&quot; different version somewhere else.&quot; Plugin &#39;ascenator&#x2F;L9&#39;, &#123;&#39;name&#39;: &#39;newL9&#39;&#125;Plugin &#39;scrooloose&#x2F;nerdtree&#39;&quot; All of your Plugins must be added before the following linePlugin &#39;mattn&#x2F;emmet-vim&#39;Plugin &#39;hail2u&#x2F;vim-css3-syntax&#39;Plugin &#39;groenewege&#x2F;vim-less&#39;Plugin &#39;Raimondi&#x2F;delimitMate&#39;Plugin &#39;scrooloose&#x2F;syntastic&#39;Plugin &#39;Shougo&#x2F;neco-vim&#39;Plugin &#39;majutsushi&#x2F;tagbar&#39;Plugin &#39;jiangmiao&#x2F;auto-pairs&#39;Plugin &#39;vim-airline&#x2F;vim-airline&#39;Plugin &#39;c.vim&#39;Plugin &#39;gorodinskiy&#x2F;vim-coloresque&#39;Plugin &#39;sheerun&#x2F;vim-polyglot&#39;Plugin &#39;artur-shaik&#x2F;vim-javacomplete2&#39;Plugin &#39;pangloss&#x2F;vim-javascript&#39;Plugin &#39;alvan&#x2F;vim-closetag&#39;Plugin &#39;Yggdroot&#x2F;indentLine&#39;Plugin &#39;maksimr&#x2F;vim-jsbeautify&#39;Plugin &#39;othree&#x2F;html5.vim&#39;Plugin &#39;othree&#x2F;javascript-libraries-syntax.vim&#39;Plugin &#39;sickill&#x2F;vim-monokai&#39;Plugin &#39;Shougo&#x2F;neocomplete.vim&#39;Plugin &#39;Shougo&#x2F;neosnippet&#39;Plugin &#39;Shougo&#x2F;neosnippet-snippets&#39;Plugin &#39;ervandew&#x2F;supertab&#39;Plugin &#39;OmniCppComplete&#39; Plugin &#39;othree&#x2F;jspc.vim&#39;Plugin &#39;1995eaton&#x2F;vim-better-javascript-completion&#39;Plugin &#39;tomasr&#x2F;molokai&#39; Plugin &#39;digitaltoad&#x2F;vim-pug&#39; Plugin &#39;dNitro&#x2F;vim-pug-complete&#39; Plugin &#39;itspriddle&#x2F;vim-jquery&#39;Plugin &#39;posva&#x2F;vim-vue&#39;Plugin &#39;myhere&#x2F;vim-nodejs-complete&#39;Plugin &#39;heavenshell&#x2F;vim-jsdoc&#39;Plugin &#39;isRuslan&#x2F;vim-es6&#39;Plugin &#39;leshill&#x2F;vim-json&#39;Plugin &#39;rhysd&#x2F;vim-clang-format&#39;Plugin &#39;geoffharcourt&#x2F;vim-matchit&#39;Plugin &#39;vim-scripts&#x2F;indentpython.vim&#39;Plugin &#39;jelera&#x2F;vim-javascript-syntax&#39;Plugin &#39;AutoComplPop&#39;Plugin &#39;shawncplus&#x2F;phpcomplete.vim&#39;Plugin &#39;mxw&#x2F;vim-jsx&#39;call vundle#end()            &quot; requiredfiletype plugin indent on    &quot; required&quot; To ignore plugin indent changes, instead use:&quot;filetype plugin on&quot;&quot; Brief help&quot; :PluginList       - lists configured plugins&quot; :PluginInstall    - installs plugins; append &#96;!&#96; to update or just :PluginUpdate&quot; :PluginSearch foo - searches for foo; append &#96;!&#96; to refresh local cache&quot; :PluginClean      - confirms removal of unused plugins; append &#96;!&#96; to auto-approve removal&quot;&quot; see :h vundle for more details or wiki for FAQ&quot; Put your non-Plugin stuff after this lineet selectmode&#x3D;mouse,keyset showmatchset tabstop&#x3D;4set shiftwidth&#x3D;4set expandtabinoremap jj &lt;Esc&gt;map &lt;F5&gt; :NERDTreeMirror&lt;CR&gt;map &lt;F5&gt; :NERDTreeToggle&lt;CR&gt;let NERDTreeShowHidden&#x3D;1let NERDTreeWinPos&#x3D;0function ShortTabLabel ()    let bufnrlist &#x3D; tabpagebuflist (v:lnum)    let label &#x3D; bufname (bufnrlist[tabpagewinnr (v:lnum) -1])    let filename &#x3D; fnamemodify (label, &#39;:t&#39;)    return filenameendfunctionset guitablabel&#x3D;%&#123;ShortTabLabel()&#125;inoremap &#39; &#39;&#39;&lt;ESC&gt;iinoremap &quot; &quot;&quot;&lt;ESC&gt;iinoremap ( ()&lt;ESC&gt;iinoremap [ []&lt;ESC&gt;iinoremap &#123; &#123;&lt;CR&gt;&#125;&lt;ESC&gt;Oinoremap &lt;C+k&gt; &lt;ESC&gt;la let g:pmenu_scheme &#x3D; &#39;dark&#39;let g:snipMate &#x3D; &#123;&#125;let g:snipMate.scope_aliases &#x3D; &#123;&#125;let g:javascript_scope_aliases &#x3D; &#39;javascript,javascript-react,javascript-es6-react&#39;let g:snipMate.scope_aliases[&#39;javascript&#39;] &#x3D; g:javascript_scope_aliaseslet g:snipMate.scope_aliases[&#39;javascript.jsx&#39;] &#x3D; g:javascript_scope_aliaseslet g:tsuquyomi_javascript_support &#x3D; 1let g:tsuquyomi_completion_detail &#x3D; 0let g:tsuquyomi_completion_preview &#x3D; 0let g:tsuquyomi_auto_open &#x3D; 0&quot; Jedi 配置let g:jedi#auto_initialization &#x3D; 1let g:jedi#popup_on_dot &#x3D; 1let g:jedi#popup_select_first &#x3D; 0let g:jedi#show_call_signatures &#x3D; &quot;1&quot;autocmd FileType python setlocal completeopt-&#x3D;previewset completeopt&#x3D;preview,menuset completeopt&#x3D;longest,menuset autowrite<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tmux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tmux 配置</title>
      <link href="2021/02/07/tmux-pei-zhi/"/>
      <url>2021/02/07/tmux-pei-zhi/</url>
      
        <content type="html"><![CDATA[<p>个人使用的 tmux 习惯配置。</p><pre class="line-numbers language-none"><code class="language-none"># ~&#x2F;.tmux.conf# Send prefixset-option -g prefix C-aunbind-key C-abind-key C-a send-prefix# Use shift-arrow keys to switch panesbind -n S-Left select-pane -Lbind -n S-Right select-pane -Rbind -n S-Up select-pane -Ubind -n S-Down select-pane -D# Set easier window split keysbind-key v split-window -hbind-key h split-window -v# Easy config reloadbind-key r source-file ~&#x2F;.tmux.conf \; display-message &quot;tmux.conf reloaded&quot;# Display colorset -g default-terminal &quot;screen-256color&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tmux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack 的 loader 和 plugin 的区别</title>
      <link href="2021/02/07/webpack-de-loader-he-plugin-de-qu-bie/"/>
      <url>2021/02/07/webpack-de-loader-he-plugin-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<h3 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h3><p>它是一个转换器，将A文件进行编译成B文件，比如：将A.less转换为A.css，单纯的文件转换过程。</p><h3 id="plugin"><a href="#plugin" class="headerlink" title="plugin"></a>plugin</h3><p>是一个扩展器，它丰富了webpack本身，针对是loader结束后，webpack打包的整个过程，它并不直接操作文件，而是基于事件机制工作，会监听webpack打包过程中的某些节点，执行广泛的任务</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-cn 109.有序链表转换二叉搜索树</title>
      <link href="2020/08/19/leetcode-cn-109-you-xu-lian-biao-zhuan-huan-er-cha-sou-suo-shu/"/>
      <url>2020/08/19/leetcode-cn-109-you-xu-lian-biao-zhuan-huan-er-cha-sou-suo-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个单链表，其中的元素按升序排序，将其转换为高度平衡的二叉搜索树。<br>本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>给定的有序链表： [-10, -3, 0, 5, 9],</p><p>一个可能的答案是：[0, -3, 9, -10, null, 5], 它可以表示下面这个高度平衡二叉搜索树：</p><pre class="line-numbers language-none"><code class="language-none">     0    &#x2F; \  -3   9  &#x2F;   &#x2F;-10  5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>这题思路还是很明确的，要保证平衡二叉树，最方便的方式就是保持根节点左右两侧节点数量相同或者相差不超过 1，以此规律递归处理<br>所以问题就转化成了，找到链表的中位节点，然后将两边的节点做重复处理</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">sortedListToBST</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> TreeNode<span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">find_mid</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>            slow <span class="token operator">=</span> fast <span class="token operator">=</span> left            <span class="token keyword">while</span> fast <span class="token operator">!=</span> right <span class="token keyword">and</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">!=</span> right<span class="token punctuation">:</span>                slow <span class="token operator">=</span> slow<span class="token punctuation">.</span><span class="token builtin">next</span>                fast <span class="token operator">=</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>            <span class="token keyword">return</span> slow        <span class="token keyword">def</span> <span class="token function">build_tree</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> left <span class="token operator">==</span> right<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">None</span>            mid <span class="token operator">=</span> find_mid<span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span>            root <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span>mid<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            root<span class="token punctuation">.</span>left <span class="token operator">=</span> build_tree<span class="token punctuation">(</span>left<span class="token punctuation">,</span> mid<span class="token punctuation">)</span>            root<span class="token punctuation">.</span>right <span class="token operator">=</span> build_tree<span class="token punctuation">(</span>mid<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span>            <span class="token keyword">return</span> root        <span class="token keyword">return</span> build_tree<span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 平衡二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-cn 3.无重复字符的最长子串</title>
      <link href="2020/08/19/leetcode-cn-3-wu-chong-fu-zi-fu-de-zui-chang-zi-chuan/"/>
      <url>2020/08/19/leetcode-cn-3-wu-chong-fu-zi-fu-de-zui-chang-zi-chuan/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>示例 1:</p><p>输入: “abcabcbb”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “abc”，所以其长度为 3。<br>示例 2:</p><p>输入: “bbbbb”<br>输出: 1<br>解释: 因为无重复字符的最长子串是 “b”，所以其长度为 1。<br>示例 3:</p><p>输入: “pwwkew”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “wke”，所以其长度为 3。<br>     请注意，你的答案必须是 子串 的长度，”pwke” 是一个子序列，不是子串。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>用到一个滑动窗口的概念，也可以理解为两个指针的遍历。<br>设置一个窗口，窗口起始指针 left 和窗口结束指针 right 都从字符串最左侧开始。<br>设置一个集合来存储当前窗口中的值<br>遍历开始，right 指针向右遍历，每次遍历的时候，判断当前 right 指针指向的值是否在集合中，若在，则 left 指针向右移动，并更新集合，直到 right 指针指向的值不在集合中，将此时的值放入集合。<br>每次 right 指针移动完成，判断集合长度，如果大于之前已找到的最大长度，则更新最大长度</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        left <span class="token operator">=</span> <span class="token number">0</span>        content <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        max_length <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> index<span class="token punctuation">,</span> item <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> item <span class="token keyword">in</span> content<span class="token punctuation">:</span>                content<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span>                left <span class="token operator">+=</span> <span class="token number">1</span>            content<span class="token punctuation">.</span>add<span class="token punctuation">(</span>item<span class="token punctuation">)</span>            <span class="token keyword">if</span> index <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">></span> max_length<span class="token punctuation">:</span>                max_length <span class="token operator">=</span> index <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">return</span> max_length<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-cn 2.两数相加</title>
      <link href="2020/08/16/leetcode-cn-2-liang-shu-xiang-jia/"/>
      <url>2020/08/16/leetcode-cn-2-liang-shu-xiang-jia/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。<br>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。<br>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>输出：7 -&gt; 0 -&gt; 8<br>原因：342 + 465 = 807</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>这道题基本没有什么花里胡哨的解法，直接一遍遍历两个链表，复杂度为O(n)，注意实际编码的时候可以写干净一点</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> l1<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> l2<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> ListNode<span class="token punctuation">:</span>        new_head <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        node <span class="token operator">=</span> new_head        carry <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> l1 <span class="token keyword">or</span> l2<span class="token punctuation">:</span>            x <span class="token operator">=</span> l1<span class="token punctuation">.</span>val <span class="token keyword">if</span> l1 <span class="token keyword">else</span> <span class="token number">0</span>            y <span class="token operator">=</span> l2<span class="token punctuation">.</span>val <span class="token keyword">if</span> l2 <span class="token keyword">else</span> <span class="token number">0</span>            val <span class="token operator">=</span> x <span class="token operator">+</span> y <span class="token operator">+</span> carry            carry <span class="token operator">=</span> val <span class="token operator">//</span> <span class="token number">10</span>            node<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> ListNode<span class="token punctuation">(</span>val <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> l1<span class="token punctuation">:</span>                l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span><span class="token builtin">next</span>            <span class="token keyword">if</span> l2<span class="token punctuation">:</span>                l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span><span class="token builtin">next</span>            node <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token keyword">if</span> carry<span class="token punctuation">:</span>            node<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> new_head<span class="token punctuation">.</span><span class="token builtin">next</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h3><p>本系列博客所有题目出自 <a href="https://leetcode-cn.com/">https://leetcode-cn.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-cn 1.两数之和</title>
      <link href="2020/08/14/leetcode-cn-1-liang-shu-zhi-he/"/>
      <url>2020/08/14/leetcode-cn-1-liang-shu-zhi-he/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>给定 nums = [2, 7, 11, 15], target = 9<br>因为 nums[0] + nums[1] = 2 + 7 = 9<br>所以返回 [0, 1]</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>暴力两层嵌套循环是最容易想到的办法，但这样的解法时间复杂度至少为 O(n^2)<br>优化思路主要两个方向</p><ol><li>加快检索速度<br>由于我们最终需要输出的是下标，加快检索速度的话，可以用 hashmap 来存储已经访问过的节点，将数组项的值当作 map 的 key，将下标作为 value</li><li>减少重复计算<br>在使用 hashmap 来存储已经访问过的节点的基础上，减少重复计算变得很好实现。我们只需要一遍遍历 nums，设下标为 i，计算 target - nums[i] 是否是 hashmap 的一个 key 值，如果不是，就将当前节点存储在 hashmap，如果是，问题就解完了。</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        dct <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> index<span class="token punctuation">,</span> num <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> target <span class="token operator">-</span> num <span class="token keyword">in</span> dct<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span>dct<span class="token punctuation">[</span>target <span class="token operator">-</span> num<span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token punctuation">]</span>            dct<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> index<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h2><p>本系列博客所有题目出自 <a href="https://leetcode-cn.com/">https://leetcode-cn.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> hashmap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 的 datetime 模块</title>
      <link href="2019/03/29/python-de-datetime-mo-kuai/"/>
      <url>2019/03/29/python-de-datetime-mo-kuai/</url>
      
        <content type="html"><![CDATA[<p>开发的时候不可避免会遇到获取时间和处理时间的场景，python 为开发者提供了一个模块叫 datetime，运用这个模块可以很好地处理大部分问题。</p><h3 id="获取当前的日期和时间"><a href="#获取当前的日期和时间" class="headerlink" title="获取当前的日期和时间"></a>获取当前的日期和时间</h3><pre class="line-numbers language-none"><code class="language-none">import datetimenow &#x3D; datetime.datetime.now()print(now)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>运行以上代码，在我本机上输出为</p><pre class="line-numbers language-none"><code class="language-none">2019-03-29 15:02:26.404151<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="获取当前的日期"><a href="#获取当前的日期" class="headerlink" title="获取当前的日期"></a>获取当前的日期</h3><pre class="line-numbers language-none"><code class="language-none">import datetimetoday &#x3D; datetime.date.today()print(today)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>运行得到结果</p><pre class="line-numbers language-none"><code class="language-none">2019-03-29<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="datatime里有什么"><a href="#datatime里有什么" class="headerlink" title="datatime里有什么"></a>datatime里有什么</h3><p>如果你够细心，应该已经发现，在第一个例子里，我们用的是</p><pre class="line-numbers language-none"><code class="language-none">datetime.datetime<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>而在第二个例子里，我们用的是</p><pre class="line-numbers language-none"><code class="language-none">datetime.date<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里的 <code>datetime</code> 和 <code>date</code> 就是 <code>datetime</code> 这个库的里的两个类。</p><p>所以 <code>datetime</code> 里到底有什么呢，我们可以用 <code>dir</code> 函数来看看</p><pre class="line-numbers language-none"><code class="language-none">import datetimeprint(dir(datetime))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样可以把 <code>datetime</code> 的所有属性值打印出来</p><pre class="line-numbers language-none"><code class="language-none">[&#39;MAXYEAR&#39;, &#39;MINYEAR&#39;, &#39;__builtins__&#39;, &#39;__cached__&#39;, &#39;__doc__&#39;, &#39;__file__&#39;, &#39;__loader__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, &#39;__spec__&#39;, &#39;date&#39;, &#39;datetime&#39;, &#39;datetime_CAPI&#39;, &#39;time&#39;, &#39;timedelta&#39;, &#39;timezone&#39;, &#39;tzinfo&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一般来说，我们常用 datetime 这四个类：</p><pre class="line-numbers language-none"><code class="language-none">datatimedatetimetimedelta<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>下面用几个例子看看这几个类</p><h2 id="datetime-date"><a href="#datetime-date" class="headerlink" title="datetime.date"></a>datetime.date</h2><h3 id="用-Date-对象表示日期"><a href="#用-Date-对象表示日期" class="headerlink" title="用 Date 对象表示日期"></a>用 <code>Date</code> 对象表示日期</h3><pre class="line-numbers language-none"><code class="language-none">import datetimed &#x3D; datetime.date(2019, 4, 13)print(d)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>输出</p><pre class="line-numbers language-none"><code class="language-none">2019-04-13<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的 <code>date()</code> 是 <code>date</code> 类的构造函数，这个构造函数传入三个参数：<code>year, month, day</code>。</p><h3 id="获取当前日期"><a href="#获取当前日期" class="headerlink" title="获取当前日期"></a>获取当前日期</h3><pre class="line-numbers language-none"><code class="language-none">from datetime import datetoday &#x3D; date.today()print(&quot;Current date &#x3D;&quot;, today)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里用类里的 today() 函数创建了一个包含当前日期的 <code>data</code> 对象。<br>输出</p><pre class="line-numbers language-none"><code class="language-none">Current date &#x3D; 2019-03-29<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="从-timestamp-里获取日期"><a href="#从-timestamp-里获取日期" class="headerlink" title="从 timestamp 里获取日期"></a>从 <code>timestamp</code> 里获取日期</h3><p><code>timestamp</code> 是从 <code>UTC</code> 时间的1970年1月1号到某个时间的秒数。可以通过 <code>fromtimestamp()</code> 方法把 <code>timestamp</code> 转化为日期。</p><pre class="line-numbers language-none"><code class="language-none">from datetime import datetimestamp &#x3D; date.fromtimestamp(1553853181)print(&quot;Date &#x3D;&quot;, timestamp)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>输出</p><pre class="line-numbers language-none"><code class="language-none">Date &#x3D; 2019-03-29<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="datetime-time"><a href="#datetime-time" class="headerlink" title="datetime.time"></a>datetime.time</h2><p>一个 time 类构造出的 time 对象表示了当地的时间</p><h3 id="用-time-对象表示时间"><a href="#用-time-对象表示时间" class="headerlink" title="用 time 对象表示时间"></a>用 time 对象表示时间</h3><pre class="line-numbers language-none"><code class="language-none">from datetime import time# time(hour &#x3D; 0, minute &#x3D; 0, second &#x3D; 0)a &#x3D; time()print(&quot;a &#x3D;&quot;, a)# time(hour, minute and second)b &#x3D; time(11, 34, 56)print(&quot;b &#x3D;&quot;, b)# time(hour, minute and second)c &#x3D; time(hour &#x3D; 11, minute &#x3D; 34, second &#x3D; 56)print(&quot;c &#x3D;&quot;, c)# time(hour, minute, second, microsecond)d &#x3D; time(11, 34, 56, 234566)print(&quot;d &#x3D;&quot;, d)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出的是</p><pre class="line-numbers language-none"><code class="language-none">a &#x3D; 00:00:00b &#x3D; 11:34:56c &#x3D; 11:34:56d &#x3D; 11:34:56.234566<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>打印时、分、秒、毫秒</p><pre class="line-numbers language-none"><code class="language-none">from datetime import timea &#x3D; time(11, 34, 56)print(&quot;hour &#x3D;&quot;, a.hour)print(&quot;minute &#x3D;&quot;, a.minute)print(&quot;second &#x3D;&quot;, a.second)print(&quot;microsecond &#x3D;&quot;, a.microsecond)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印输出</p><pre class="line-numbers language-none"><code class="language-none">hour &#x3D; 11minute &#x3D; 34second &#x3D; 56microsecond &#x3D; 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们并没有初始化秒表信息，它的默认值为0</p><h2 id="datetime-datetime"><a href="#datetime-datetime" class="headerlink" title="datetime.datetime"></a>datetime.datetime</h2><p>这个类包含了 日期 和 时间 的信息</p><h3 id="datetime-对象"><a href="#datetime-对象" class="headerlink" title="datetime 对象"></a>datetime 对象</h3><pre class="line-numbers language-none"><code class="language-none">from datetime import datetime#datetime(year, month, day)a &#x3D; datetime(2018, 11, 28)print(a)# datetime(year, month, day, hour, minute, second, microsecond)b &#x3D; datetime(2017, 11, 28, 23, 55, 59, 342380)print(b)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印输出</p><pre class="line-numbers language-none"><code class="language-none">2018-11-28 00:00:002017-11-28 23:55:59.342380<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>datetime()</code> 构造函数里的前三个参数 <code>year, month, day</code> 是必须的。</p><h3 id="打印年、月、日、时、分、秒和时间戳"><a href="#打印年、月、日、时、分、秒和时间戳" class="headerlink" title="打印年、月、日、时、分、秒和时间戳"></a>打印年、月、日、时、分、秒和时间戳</h3><pre class="line-numbers language-none"><code class="language-none">from datetime import datetimea &#x3D; datetime(2017, 11, 28, 23, 55, 59, 342380)print(&quot;year &#x3D;&quot;, a.year)print(&quot;month &#x3D;&quot;, a.month)print(&quot;hour &#x3D;&quot;, a.hour)print(&quot;minute &#x3D;&quot;, a.minute)print(&quot;timestamp &#x3D;&quot;, a.timestamp())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印输出</p><pre class="line-numbers language-none"><code class="language-none">year &#x3D; 2017month &#x3D; 11hour &#x3D; 23minute &#x3D; 55timestamp &#x3D; 1511884559.34238<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="datetime-timedelta"><a href="#datetime-timedelta" class="headerlink" title="datetime.timedelta"></a>datetime.timedelta</h2><p>timedelta 可以用来做 两个日期和时间 之间的计算</p><h3 id="dates-和-times-的差值"><a href="#dates-和-times-的差值" class="headerlink" title="dates 和 times 的差值"></a>dates 和 times 的差值</h3><pre class="line-numbers language-none"><code class="language-none">from datetime import datetime, datet1 &#x3D; date(year &#x3D; 2018, month &#x3D; 7, day &#x3D; 12)t2 &#x3D; date(year &#x3D; 2017, month &#x3D; 12, day &#x3D; 23)t3 &#x3D; t1 - t2print(&quot;t3 &#x3D;&quot;, t3)t4 &#x3D; datetime(year &#x3D; 2018, month &#x3D; 7, day &#x3D; 12, hour &#x3D; 7, minute &#x3D; 9, second &#x3D; 33)t5 &#x3D; datetime(year &#x3D; 2019, month &#x3D; 6, day &#x3D; 10, hour &#x3D; 5, minute &#x3D; 55, second &#x3D; 13)t6 &#x3D; t4 - t5print(&quot;t6 &#x3D;&quot;, t6)print(&quot;type of t3 &#x3D;&quot;, type(t3))print(&quot;type of t6 &#x3D;&quot;, type(t6))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印输出</p><pre class="line-numbers language-none"><code class="language-none">t3 &#x3D; 201 days, 0:00:00t6 &#x3D; -333 days, 1:14:20type of t3 &#x3D; &lt;class &#39;datetime.timedelta&#39;&gt;type of t6 &#x3D; &lt;class &#39;datetime.timedelta&#39;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意，t3 和 t6 是</p><pre class="line-numbers language-none"><code class="language-none">&lt;class &#39;datetime.timedelta&#39;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="两个-timedelta-对象的差值"><a href="#两个-timedelta-对象的差值" class="headerlink" title="两个 timedelta 对象的差值"></a>两个 timedelta 对象的差值</h3><pre class="line-numbers language-none"><code class="language-none">from datetime import timedeltat1 &#x3D; timedelta(weeks &#x3D; 2, days &#x3D; 5, hours &#x3D; 1, seconds &#x3D; 33)t2 &#x3D; timedelta(days &#x3D; 4, hours &#x3D; 11, minutes &#x3D; 4, seconds &#x3D; 54)t3 &#x3D; t1 - t2print(&quot;t3 &#x3D;&quot;, t3)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印输出</p><pre class="line-numbers language-none"><code class="language-none">t3 &#x3D; 14 days, 13:55:39<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="timedelta-对象可以为负值"><a href="#timedelta-对象可以为负值" class="headerlink" title="timedelta 对象可以为负值"></a>timedelta 对象可以为负值</h3><pre class="line-numbers language-none"><code class="language-none">from datetime import timedeltat1 &#x3D; timedelta(seconds &#x3D; 33)t2 &#x3D; timedelta(seconds &#x3D; 54)t3 &#x3D; t1 - t2print(&quot;t3 &#x3D;&quot;, t3)print(&quot;t3 &#x3D;&quot;, abs(t3))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印输出</p><pre class="line-numbers language-none"><code class="language-none">t3 &#x3D; -1 day, 23:59:39t3 &#x3D; 0:00:21<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="用秒数表示时间间隔"><a href="#用秒数表示时间间隔" class="headerlink" title="用秒数表示时间间隔"></a>用秒数表示时间间隔</h3><p>我们可以用 <code>total_seconds()</code> 把 <code>timedelta</code> 对象表示成秒数</p><pre class="line-numbers language-none"><code class="language-none">from datetime import timedeltat &#x3D; timedelta(days &#x3D; 5, hours &#x3D; 1, seconds &#x3D; 33, microseconds &#x3D; 233423)print(&quot;total seconds &#x3D;&quot;, t.total_seconds())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>打印输出</p><pre class="line-numbers language-none"><code class="language-none">total seconds &#x3D; 435633.233423<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>timedelta</code> 对象之间也支持 <code>+</code> 运算符。<code>timedelta</code> 对象和整型和浮点型数之间也可以使用 乘法 和 除法。</p><h2 id="python-格式化日期和时间"><a href="#python-格式化日期和时间" class="headerlink" title="python 格式化日期和时间"></a>python 格式化日期和时间</h2><p>在 python 里我们一般可以用 <code>strftime()</code> 和 <code>strptime()</code> 方法来处理格式化数据问题。</p><h3 id="strftime-把-datetime-对象转化为-string"><a href="#strftime-把-datetime-对象转化为-string" class="headerlink" title="strftime() - 把 datetime 对象转化为 string"></a>strftime() - 把 datetime 对象转化为 string</h3><pre class="line-numbers language-none"><code class="language-none">from datetime import datetime# current date and timenow &#x3D; datetime.now()t &#x3D; now.strftime(&quot;%H:%M:%S&quot;)print(&quot;time:&quot;, t)s1 &#x3D; now.strftime(&quot;%m&#x2F;%d&#x2F;%Y, %H:%M:%S&quot;)# mm&#x2F;dd&#x2F;YY H:M:S formatprint(&quot;s1:&quot;, s1)s2 &#x3D; now.strftime(&quot;%d&#x2F;%m&#x2F;%Y, %H:%M:%S&quot;)# dd&#x2F;mm&#x2F;YY H:M:S formatprint(&quot;s2:&quot;, s2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印输出</p><pre class="line-numbers language-none"><code class="language-none">time: 09:16:25s1: 03&#x2F;31&#x2F;2019, 09:16:25s2: 31&#x2F;03&#x2F;2019, 09:16:25<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里的 <code>%Y %m %d %H</code> 就是格式化的代码。 <code>strftime()</code> 方法接受一个或多个格式化代码，返回一个格式化后的字符串。</p><pre class="line-numbers language-none"><code class="language-none">%Y - year%m - month%d - day%H - hour%M - month%S - second<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="strptime-把-string-转化为-datetime-对象"><a href="#strptime-把-string-转化为-datetime-对象" class="headerlink" title="strptime() - 把 string 转化为 datetime 对象"></a>strptime() - 把 string 转化为 datetime 对象</h3><pre class="line-numbers language-none"><code class="language-none">from datetime import datetimedate_string &#x3D; &quot;21 June, 2018&quot;print(&quot;date_string &#x3D;&quot;, date_string)date_object &#x3D; datetime.strptime(date_string, &quot;%d %B, %Y&quot;)print(&quot;date_object &#x3D;&quot;, date_object)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印输出</p><pre class="line-numbers language-none"><code class="language-none">date_string &#x3D; 21 June, 2018date_object &#x3D; 2018-06-21 00:00:00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>strptime() 函数接收两个参数</p><ol><li>一个表示日期和时间的 string</li><li>格式化代码</li></ol><h2 id="处理时区"><a href="#处理时区" class="headerlink" title="处理时区"></a>处理时区</h2><p>python 更推荐使用第三方库 <code>pytZ</code> 类库来处理时区问题</p><pre class="line-numbers language-none"><code class="language-none">from datetime import datetimeimport pytzlocal &#x3D; datetime.now()print(&quot;Local:&quot;, local.strftime(&quot;%m&#x2F;%d&#x2F;%Y, %H:%M:%S&quot;))tz_NY &#x3D; pytz.timezone(&#39;America&#x2F;New_York&#39;) datetime_NY &#x3D; datetime.now(tz_NY)print(&quot;NY:&quot;, datetime_NY.strftime(&quot;%m&#x2F;%d&#x2F;%Y, %H:%M:%S&quot;))tz_London &#x3D; pytz.timezone(&#39;Europe&#x2F;London&#39;)datetime_London &#x3D; datetime.now(tz_London)print(&quot;London:&quot;, datetime_London.strftime(&quot;%m&#x2F;%d&#x2F;%Y, %H:%M:%S&quot;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印输出</p><pre class="line-numbers language-none"><code class="language-none">Local: 03&#x2F;31&#x2F;2019, 09:37:37NY: 03&#x2F;30&#x2F;2019, 21:37:37London: 03&#x2F;31&#x2F;2019, 02:37:37<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> date-time </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新年快乐</title>
      <link href="2019/02/04/xin-nian-kuai-le/"/>
      <url>2019/02/04/xin-nian-kuai-le/</url>
      
        <content type="html"><![CDATA[<p>有一种孤独叫热闹孤独</p><p>其实越是开开心心的人群</p><p>越能让真正孤独的人感觉到寂寞吧</p><p>新的一年</p><p>却不知道了自己希望被祝福什么</p><p>祝了一个朋友新年快乐</p><p>希望能一直是朋友</p><p>收到一个朋友的祝福</p><p>希望她新年能跟我更好吧</p><p>不过人生好像本来就是这样的</p><p>该开始恢复这两年</p><p>因为有女朋友而忘却的一个人生活的能力</p><p>该重新体会孤独的滋味</p><p>然后重新学会享受孤独和真正的成长</p><p>愿世界快乐</p><p>愿孤独也能带来能量</p>]]></content>
      
      
      <categories>
          
          <category> 诗歌已死 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗歌已死 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
